#Write a function called hide_and_seek. The function should
#have no parameters and return no value; instead, when
#called, it should just print the numbers from 1 through 10,
#follow by the text "Ready or not, here I come!". Each
#number and the message at the end should be on its own
#line.
#
#Then, call the function.
#
#There should be no print statements outside the function.


#Write your function here!
def hide_and_seek():
    for i in range(1, 11):
        print(i)
    print("Ready or not, here I come!")


#Call your function here!
hide_and_seek()

#########################
#A year is considered a leap year if it abides by the
#following rules:
#
#  - Every 4th year IS a leap year, EXCEPT...
#  - Every 100th year is NOT a leap year, EXCEPT...
#  - Every 400th year IS a leap year.
#
#This starts at year 0. For example:
#
#  - 1993 is not a leap year because it is not a multiple of 4.
#  - 1996 is a leap year because it is a multiple of 4.
#  - 1900 is not a leap year because it is a multiple of 100,
#    even though it is a multiple of 4.
#  - 2000 is a leap year because it is a multiple of 400,
#    even though it is a multiple of 100.
#
#Write a function called is_leap_year. is_leap_year should
#take one parameter: year, an integer. It should return the
#boolean True if that year is a leap year, the boolean False
#if it is not.


#Write your function here!
def is_leap_year(year):
    if year % 400 == 0:
        return True
    elif year % 100 == 0:
        return False
    elif year % 4 == 0:
        return True
    else:
        return False
        
#########################
#Write a function called lucky_sevens that takes in one
#parameter, a string variable named a_string. Your function
#should return True if there are exactly three '7's in
#a_string. If there are less than three or more than three
#'7's, the function should return False.
#
#For example:
#  - lucky_sevens("happy777bday") should return True.
#  - lucky_sevens("h7app7ybd7ay") should also return True.
#  - lucky_sevens("happy77bday") should return False.
#  - lucky_sevens("h777appy777bday") should also return False.
#
#Hint: Remember in Chapter 3.3, we covered how to use a loop
#to look at each character in a string.


#Write your function here!
def lucky_sevens(string):
    count = 0
    for i in range(len(string)):
        character = string[i]
        if character == "7":
            count += 1
    if count == 3:
        return True
    else:
        return False


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: True, True, False, False, each on their own line.
print(lucky_sevens("happy777bday"))
print(lucky_sevens("h7app7ybd7ay"))
print(lucky_sevens("happy77bday"))
print(lucky_sevens("h777appy777bday"))

#########################
#In chemistry, the ideal gas law states:
#
# pressure * volume = # of moles * gas constant * temperature
#
#This is usually abbreviated to:
#
# PV = nRT
#
#We can solve this for any of these five variables, but let's
#solve it for Pressure. In terms of Pressure, the ideal gas
#law states:
#
# P = (nRT) / V
#
#Write a function called find_pressure that takes as input
#three variables: number of moles, temperature, and volume.
#You can call these variables in the function whatever you
#want, but they must be specified in that order: moles, then
#temperature, then volume. You should assume all three are
#floats. Then, return as output your calculation for
#pressure. For the gas constant, you should use the value 
#0.082057.
#
#Hint: Python's rounding errors can change based on the
#order of the multipliers. If you're having difficulty with
#your answer being off by tiny fractions, change the order
#of the numbers to match the order in the formula above.


#Write your function here!
def find_pressure(moles, temperature, volume):
    R = 0.082057
    return (moles * temperature * R) / volume


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Result: 48.905972000000006". The extra zeroes and
#the 6 are rounding errors by Python.
test_n = 10
test_T = 298
test_V = 5
print("Result:", find_pressure(test_n, test_T, test_V))

#######################
#Last problem, we wrote a function that calculated pressure
#given number of moles, temperature, and volume. We told you
#to assume a value of 0.082057 for R. This value means that
#pressure must be given in atm, or atmospheres, one of the
#common units of measurement for pressure.
#
#atm is the most common unit for pressure, but there are
#others: mmHg, Torr, Pa, kPa, bar, and mb, for example. what
#if pressure was sent in using one of these units? Our
#calculation would be wrong!
#
#So, we want to *assume* that pressure is in atm (and thus,
#that R should be 0.082057), but we want to let the person
#calling our function change that if need be. So, revise
#your find_pressure function so that R is a keyword parameter.
#Its default value should be 0.082057, but the person calling
#the function can override that. The name of the parameter for
#the gas constant must be R for this to work.
#
#As a reminder, you're writing a function that calculates:
#
# P = (nRT) / V
#


#Write your function here! You may copy your work from 3.4.5
#if you'd like.
def find_pressure(moles, temperature, volume, R = 0.082057):
    return (moles * temperature * R) / volume


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "Result: 37168.944".
test_n = 10
test_T = 298
test_V = 5
test_R = 62.364 #Torr!
print("Result:", find_pressure(test_n, test_T, test_V, R = test_R))

#######################
#Basketball coach Phil Jackson says that in order for an NBA
#team to be a contender for a championship, they need to win
#40 games before they lose 20 games.
#
#Write a function called is_a_contender that will take three
#parameters: a team name (a string), a number of wins (an
#integer), and a number of losses (an integer).
#
#Based on these parameters, the function should return one
#of three strings:
#
# - If the team is a contender (at least 40 wins and fewer
#   than 20 losses), return "The [team name] are a contender!"
# - If the team is not a contender (less than 40 wins and at least
#   20 losses), return "The [team name] are not a contender!"
# - If it cannot be determined (both values are higher or both
#   values are lower), return "The [team name] might be a contender!"


#Add your code here!
def is_a_contender(name, win, lose):
    if win >= 40 and lose < 20:
        return "The " + name + " are a contender!"
    elif win < 40 and lose >= 20:
        return "The " + name + " are not a contender!"
    else:
        return "The " + name + " might be a contender!"


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: "The Hawks are not a contender!".

test_team_name = "Hawks"
test_wins = 18
test_losses = 40

print(is_a_contender(test_team_name, test_wins, test_losses))

#######################
#Consult this blood pressures chart: http://bit.ly/2CloACs
#
#Write a function called check_blood_pressure that takes two
#parameters: a systolic blood pressure and a diastolic blood
#pressure, in that order. Your function should return "Low",
#"Ideal", "Pre-high", or "High" -- whichever corresponds to
#the given systolic and diastolic blood pressure.
#
#You should assume that if a combined blood pressure is on the
#line between two categories (e.g. 80 and 60, or 120 and 70),
#the result should be the higher category (e.g. Ideal and
#Pre-high for those two combinations).
#
#HINT: Don't overcomplicate this! Think carefully about in
#what order you should check the different categories. This
#problem could be easy or extremely hard depending on the
#order you change and whether you use returns or elifs wisely.


#Add your code here!
def check_blood_pressure(systolic, diastolic):
    if systolic >= 140:
        return "High"
    elif systolic >= 120:
        if diastolic >= 90:
            return "High"
        else:
            return "Pre-high"
    elif systolic >= 90:
        if diastolic >= 90:
            return "High"
        elif diastolic >= 80:
            return "Pre-high"
        else:
            return "Ideal"
    elif systolic >= 70:
        if diastolic >= 90:
            return "High"
        elif diastolic >= 80:
            return "Pre-high"
        elif diastolic >= 60:
            return "Ideal"
        else:
            return "Low"

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: Ideal
test_systolic = 110
test_diastolic = 70

print(check_blood_pressure(test_systolic, test_diastolic))

#######################
#Recall Coding Problem 2.4.4. In that problem, you calculated
#the damage done by an attack based on several parameters.
#
#Convert your code from there into two functions, one called
#calculate_damage and one called calculate_modifier.
#
#Your function for calculate_damage must call calculate_modifier;
#it may not calculate the modifier separately. As such,
#calculate_damage should accept all ten parameters: STAB,
#Type, Critical, Other, Random, Level, Attack, Defense, and
#Base. You'll need to pass STAB, Type, Critical, Other, and
#Random to calculate_modifier.
#
#Make sure the parameters to each function follow the order
#shown above.
#
#As a reminder, damage is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@DamageCalc.png
#
#Modifier is calculated using this formula:
#https://studio.edx.org/asset-v1:GTx+CS1301+1T2017+type@asset+block@ModifierCalc.png


#Add your code here!9
def calculate_modifier(STAB, Type, Critical, Other, Random):
    modifier = STAB * Type * Critical * Other * Random
    return modifier

def calculate_damage(STAB, Type, Critical, Other, Random, Level, Attack, Defense, Base):
    one = ((2 * Level) + 10) / 250
    two = Attack / Defense
    damage = ((one * two * Base) + 2) * calculate_modifier(STAB, Type, Critical, Other, Random)
    return damage


#Below are some lines of code that will test your function.
#You can change the value of the variable to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 16.0
STAB = 1
Type = 0.25
Critical = 2
Other = 1
Random = 1
Level = 50
Attack = 125
Defense = 110
Base = 60

print(calculate_damage(STAB, Type, Critical, Other, Random, Level, Attack, Defense, Base))

#######################
#-----------------------------------------------------------
#In this problem, you should write three functions:
#word_count, letter_count, and average_word_length.
#
#word_count should take as input a string. It should return
#the number of words in the string. You may assume that the
#number of words in the string will be one more than the
#number of spaces in the string.
#
#letter_count should take as input a string. It should return
#the number of letters in the string. You may assume that
#the string is only letters and spaces: no punctuation or
#numbers.
#
#average_word_length should take as input a string. It should
#return the average length of the words in the string. You
#can find the average length by dividing the number of letters
#by the number of words.
#
#Your implementation for average_word_length *must* call
#word_count and letter_count.


#Add your code here!
def word_count(string):
    w_count = 1
    for i in range(len(string)):
        if string[i] == " ":
            w_count += 1
    return w_count

def letter_count(string):
    l_count = 0
    for i in range(len(string)):
        if not(string[i] == " "):
            l_count += 1
    return l_count

def average_word_length(string):
    return letter_count(string) / word_count(string)



#Below are some lines of code that will test your function.
#You can change the value of the variable to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 3.5
a_string = "Up with the white and gold"

print(average_word_length(a_string))

#######################
#There are a lot of use cases where we want to check to see
#if a string has any invalid characters in it. For example,
#when asking for a credit card number, we want to make sure
#there are no non-numerals (although we might accept dashes
#or spaces). When asking for a name, we want to make sure
#all the characters are letters, spaces, or the occasional
#punctuation mark.
#
#Write a function called is_valid. is_valid should take two
#parameters: a string to check, and a string of all valid
#characters.
#
#is_valid should return the boolean True if all the
#characters in the string to check are present in the string
#of valid characters. It should return False if any character
#in the checked string does not appear.


#Add your code here!
def is_valid(string, character):
    count = 0
    for i in range(len(string)):
        if not(string[i] in character):
            count += 1
    if count > 0:
        return False
    elif count == 0:
        return True


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print True, then False
sample_valid_string = "1234-5678-9011-1111"
sample_invalid_string = "1234!5678.9011?1111"
valid_characters = "0123456789-"

print(is_valid(sample_valid_string, valid_characters))
print(is_valid(sample_invalid_string, valid_characters))

#######################
#In this problem, your goal is to write a function that can
#either count all the vowels in a string or all the consonants
#in a string.
#
#Call this function count_letters. It should have two
#parameters: the string in which to search, and a boolean
#called find_consonants. If find_consonants is True, then the
#function should count consonants. If it's False, then it
#should instead count vowels.
#
#Return the number of vowels or consonants in the string
#depending on the value of find_consonants. Do not count
#any characters that are neither vowels nor consonants (e.g.
#punctuation, spaces, numbers).


#Add your code here!
vowels = ["A", "a", "E", "e", "I", "i", "O", "o", "U", "u"]

def count_letters(string, find_consonants):
    if find_consonants == True:
        count = 0
        for i in range(len(string)):
            if not(string[i] in vowels) and not(string[i] == " "):
                count += 1
        return count
    elif find_consonants == False:
        count = 0
        for i in range(len(string)):
            if string[i] in vowels:
                count += 1
        return count
            

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print 14, then 7.

a_string = "Up with the white and gold"

print(count_letters(a_string, True))
print(count_letters(a_string, False))

#######################
