words = ["dog", "sparrow", "cat", "frog"]

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#This program is supposed to print the location of the 'o'
#in each word in the list. However, line 18 causes an
#error if 'o' is not in the word. Add try/except blocks
#to print "Not found" when the word does not have an 'o'.
#However, when the current word does not have an 'o', the
#program should continue to behave as it does now.
#
#Hint: don't worry that you don't know how line 18 works.
#All you need to know is that it may cause an error.
#
#You may not use any conditionals.


#Fix this code!
for word in words:
    try:
        print(word.index("o"))
    except:
        print("Not found")
        
#######################
mystery_value = 5

#You may modify the lines of code above, but don't move them!
#When you Submit your code, we'll change these lines to
#assign different values to the variables.

#Write a program that divides mystery_value by mystery_value
#and prints the result. If that operation results in an
#error, divide mystery_value by (mystery_value + 5) and then
#print the result. If that still fails, multiply mystery_value
#by 5 and print the result. You may assume one of those three
#things will work.
#
#You may not use any conditionals.
#
#Hint: You're going to want to test one try/except structure
#inside another! Think carefully about whether the second
#one should go inside the try block or the except block.


#Add your code here!
try:
    try:
        result = mystery_value / mystery_value
        print(result)
    except:
       result = mystery_value / (mystery_value + 5)
       print(result)
except:
    result = mystery_value * 5
    print(result)
   
#####################
given_items = ["one", "two", 3, 4, "five", ["six", "seven", "eight"]]

#Write a program that iterates through the items in the
#given list. For each item, you should attempt to iterate
#through the item and print each character seperately. 
#
#If this second part fails, print "Not iterable" -- but
#even if the second part fails, you should still go on
#to the next item in the list.
#
#Hint: Although we'll cover lists more in Unit 4, all
#you need to know right now is that this syntax will run
#a loop over a list, a string, or any other iterable
#type of information:
#
#  for item in given_items:
#
#To iterate over the items in 'item', you can do the
#same thing: for subitem in item:
#
#Start out by building the nested for-each loops that
#you'll need. Then, identify where the error is
#occurring to figure out where to put the try-except
#structure.
#
#This one's tricky, but you can do it!


#Add your code here!
for item in given_items:
    try:
        for subitem in item:
            try:
                print(subitem)
            except:
                pass
    except:
        print("Not iterable")
        
###################
#In Chapter 3.4, we wrote a function called find_pressure
#that calculated pressure given number of moles,
#temperature, volume, and optionally, a value for R. If no
#value was given for R, we assumed its value should be
#0.082057.
#
#However, as written, that function could crash: what about
#when the user enters a Volume of 0? That would cause a
#ZeroDivisonError! (In addition to breaking the laws of
#physics, but there's no Python error for that.)
#
#Revise that find_pressure function to catch that error. If
#that error occurs, return the string "Volume must be
#greater than 0." Otherwise, the function should work just
#as it did before.
#
#Feel free to copy your answer to that exercise and work
#from there. If you'd prefer to start from scratch, remember:
#you're creating a function called find_pressure that returns
#a value for pressure given variables n, T, V, and optionally
#R, according to this formula:
#
# Pressure = (nRT) / V
#
#You may not use a conditional. R should have a default value
#of 0.082057.


#Write your function here!
def find_pressure(moles, temperature, volume, R = 0.082057):
    try:
        return (moles * temperature * R) / volume
    except ZeroDivisionError:
        return "Volume must be greater than 0."


#You may use these lines to test your function. With the
#values initially supplied here, your function should return
#"Volume must be greater than 0."
test_n = 10
test_T = 298
test_V = 0
test_R = 62.364 #Torr!
print("Result:", find_pressure(test_n, test_T, test_V, R = test_R))

###################
#We've come a long way in this unit! You've learned about
#conditionals, loops, functions, and error handling. To end
#the unit, let's do a couple problems that tie all these
#concepts together.
#
#Write a function called word_count. word_count takes as
#input a string called my_string, and returns as output the
#number of words in the string. For the purposes of this
#problem, you can assume that every space indicates a new
#word; so, the number of words should be one more than the
#number of spaces. You may also assume that any strings are
#not empty, so there should always be at least one word if
#my_string is a string.
#
#Note, though, that it could be the case that a non-string
#is accidentally passed in as the argument for my_string. If
#that happens, an error will arise. If such an error arises,
#you should instead return "Not a string". Otherwise,
#return an integer representing the number of words in the
#string.


#Write your function here!
def word_count(string):
    try:
        w_count = 1
        for i in range(len(string)):
            if string[i] == " ":
                w_count += 1
        return w_count
    except:
        return "Not a string"


#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print: 
#Word Count: 4
#Word Count: 1
#Word Count: 7
#Word Count: Not a string
#Word Count: Not a string
#Word Count: Not a string

print("Word Count:", word_count("Four words are here!"))
print("Word Count:", word_count("One."))
print("Word Count:", word_count("There are seven words in this sentence."))
print("Word Count:", word_count(5))
print("Word Count:", word_count(5.1))
print("Word Count:", word_count(True))

###################
#Now let's make things a little more challenging.
#
#Last exercise, you wrote a function called word_count that
#counted the number of words in a string essentially by
#counting the spaces. However, if there were multiple spaces
#in a row, it would incorrectly add additional words. For
#example, it would have counted the string "Hi   David" as
#4 words instead of 2 because there are two additional
#spaces.
#
#Revise your word_count method so that if it encounters
#multiple consecutive spaces, it does *not* count an
#additional word. For example, these three strings should
#all be counted as having two words:
#
# "Hi David"
# "Hi   David"
# "Hi                 David"
#
#Other than ignoring consecutive spaces, the directions are
#the same: write a function called word_count that returns an
#integer representing the number of words in the string, or
#return "Not a string" if the input isn't a string. You may
#assume that if the input is a string, it starts with a
#letter word instead of a space.

#Write your function here!
def word_count(string):
    try:
        w_count = 1
        for i in range(len(string)):
            if (string [i] == " ") and (string[i] == string[i - 1]):
                w_count = w_count
            elif string [i] == " ":
                w_count += 1
        return w_count
    except:
        return "Not a string"
    

#Below are some lines of code that will test your function.
#You can change the value of the variable(s) to test your
#function with different inputs.
#
#If your function works correctly, this will originally
#print:
#Word Count: 4
#Word Count: 2
#Word Count: Not a string
#Word Count: Not a string
#Word Count: Not a string

print("Word Count:", word_count("Four words are here!"))
print("Word Count:", word_count("Hi   David"))
print("Word Count:", word_count(5))
print("Word Count:", word_count(5.1))
print("Word Count:", word_count(True))

###################
